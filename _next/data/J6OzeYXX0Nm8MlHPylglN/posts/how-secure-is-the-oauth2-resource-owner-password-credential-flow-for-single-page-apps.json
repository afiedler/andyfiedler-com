{"pageProps":{"postData":{"id":"how-secure-is-the-oauth2-resource-owner-password-credential-flow-for-single-page-apps","contentHtml":"<p>I've been working on a single-page, browser-based app and I was investigating using the OAuth2 \"Resource Owner Password Credential\" (ROPC) flow to log users in without needing a normal OAuth popup or redirect. The single-page app is written by the same developers as the backend API, so it is more trusted than a third-party application (which should never touch a user's password). However, since it is a client-side application in Javascript, it was unclear to me how to take steps to make this as secure as possible, so I did some research. In this post, I'll describe what I found.</p>\n<p>The other issue is that Javascript clients cannot disguise their client credentials because the user may just \"view source\" to retrieve the credentials. This makes client impersonation possible. It also means the the client is a \"public\" client for the purposes of the OAuth spec, and client authentication is not possible. The OAuth spec states that when client authentication is not possible, the authorization server SHOULD employ other means to validate the client's identity.</p>\n<p>Since we can't completely prevent client impersonation, we need to define what types of impersonation we are trying to prevent. For Javascript clients, I want to prevent two types of impersonation:</p>\n<p>In order to use the ROPC grant type for Javascript clients, we need to be more strict than the spec and absolutely ensure that the client is delivered over SSL. If the Javascript client is not delivered over SSL, a middleman could tamper with the client's Javascript to intercept either the resource owner's credentials or the access token. This makes it impossible for the resource owner to trust the client, which breaks the first chain of trust between the resource owner and the authorization server.</p>\n<p>You absolutely should implement some kind of rate-limiting on your token endpoint to prevent brute-force attacks.</p>\n<p>Finally, you should never issue public clients a refresh token (or any long-lived access token). The reason for this is that, depending on your backend architecture, these could be difficult to revoke should you need to revoke access to a specific client. For example, if you are using a JSON Web Token instead of a database record, you would need to blacklist all of them it to revoke them.</p>\n","layout":"post","status":"publish","published":true,"title":"How secure is the OAuth2 \"Resource Owner Password Credential\" flow for single-page apps?","author":{"display_name":"afiedler","login":"afiedler","email":"andy@andyfiedler.com","url":""},"author_login":"afiedler","author_email":"andy@andyfiedler.com","wordpress_id":282,"wordpress_url":"http://andyfiedler.com/?p=282","date":"2014-09-08 15:07:47 -0400","date_gmt":"2014-09-08 19:07:47 -0400","categories":["Tech Notes","Web Development"],"tags":["oauth"],"redirect_from":["/blog/how-secure-is-the-oauth2-resource-owner-password-credential-flow-for-single-page-apps-282/","/blog/how-secure-is-the-oauth2-resource-owner-password-credential-flow-for-single-page-apps-282"]}},"__N_SSG":true}
{"pageProps":{"postData":{"id":"nodejs-and-hapi-for-rails-developers","contentHtml":"<p>This post is an <strong>work in progress</strong> list of tips and tricks I've learned working on a HapiJS API after mostly coding Rails APIs for the last few years. I expect to update it as I learn more.</p>\n<p>If you are a Rails developer looking to transition to NodeJS, hopefully this will save you some time. If you are a more seasoned NodeJS or Hapi developer and have suggestions for improving this, please let me know in the comments.</p>\n<h2>Async Programming</h2>\n<h3>Error-first callbacks, promises, or <code>async</code>/<code>await</code></h3>\n<p>Most Rails developers have written some Javascript, so you are probably familiar with callbacks. On the client, having nested callbacks is relatively rare. On the server, however, they are far more common. A simple example would be a server method that needs to make a handful of database calls, with all of the depending on the outcome of the others. This would be trivial to write in a sequential way, but with NodeJS, you will need to nest callbacks to accomplish the same thing.</p>\n<p>This is both the best thing about NodeJS and the most annoying. It makes things very performant, because with callbacks you continually return control to the main event loop, freeing the main thread to move on to other things. In Rails, unless you are using a threaded server like Puma, waiting on a database call will block the entire process.</p>\n<p>All of Node core and most of the libraries use error-first callbacks. If the first argument to the callback function is truthy, then you know the callback has failed with an error. You'll see a lot of code in NodeJS like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">myCallbackFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> err<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// process the result</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This gets nasty when you have many nested callbacks and has been dubbed \"callback hell\".</p>\n<p>One way to fix this is to use a promise. You can typically turn any error-first callback function into a promise-returning function with <code>Promise.promisify()</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token known-class-name class-name\">Promise</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bluebird'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bluebird is a popular promise library</span>\n<span class=\"token keyword\">var</span> myAsyncFunction <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">promisify</span><span class=\"token punctuation\">(</span>myCallbackFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myAsyncFunction</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// process result</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// process error</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This doesn't look Earth-shattering, but promises can make deeply nested callbacks more readable. I like promises from my AngularJS programming, but they aren't widely used in the Node community. If you attempt to use them, you feel like you are fighting an uphill battle since everyone still uses error-first callbacks. They can be vital in some situations, however.</p>\n<h4>ES7 and <code>async</code>/<code>await</code></h4>\n<p>The next generation of Javascript will hopefully solve all of our problems with the addition of two new keywords: <code>async</code> and <code>await</code>. These use promises under the hood, but you can use <code>try</code>-<code>catch</code> and don't need <code>then()</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">myAsyncFunction</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// process result</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>You can use this today if you transpile with the Traceur compiler, but not much of the Node community is doing that yet. Once more people get on board, this will be a <em>huge</em> improvement in Javascript.</p>\n<h4>What do do today?</h4>\n<p>Today, I think you should stick with error-first callbacks and use promises if absolutely necessary. Another library you can look into is the <a href=\"https://github.com/caolan/async\"><code>async</code></a> library, which gives you lots of nice functions to handle many callbacks in series or parallel.</p>\n<h2>Unit Testing</h2>\n<h3>NPM packages to use</h3>\n<ul>\n<li><a href=\"https://github.com/hapijs/lab\">Lab</a> - Hapi's unit testing framework. It supports both TestUnit and RSpec style tests. I'm using the RSpec style.</li>\n<li><a href=\"https://github.com/hapijs/code\">Code</a> - An assertion library. This handles <code>expect</code> statements. There are a <a href=\"http://andyfiedler.com/blog/gotchas-with-hapis-code-library-327/\">few gotchas</a>.</li>\n</ul>\n<h3>Test folder setup</h3>\n<p>I'm using RSpec style tests, so my folder hierarchy looks like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">+ /\n|\n+---specs\n|\n+---requests\n| |\n| +---users\n| |\n| +---get.js\n|\n+---models\n|\n+---user.js</code></pre></div>\n<h3>Running your specs</h3>\n<p>To run your specs, you have two choices. You can either install lab globally and run them with the <code>lab</code> command, or you can change your <code>package.json</code> file to set what to run for <code>npm test</code>. I usually do the second options, because it lets me specify some default options for lab. Here's what the section of <code>package.json</code> file looks like:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"env $(cat .env | xargs) lab -v -L -m 0\"</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>xargs</code> part is to set the environmental variables before running the tests from the <code>.env</code> file. There probably is a better way to do this, but that is working for now.</p>\n","layout":"post","status":"publish","published":true,"title":"NodeJS and Hapi for Rails Developers","author":{"display_name":"afiedler","login":"afiedler","email":"andy@andyfiedler.com","url":""},"author_login":"afiedler","author_email":"andy@andyfiedler.com","wordpress_id":324,"wordpress_url":"http://andyfiedler.com/?p=324","date":"2015-07-22 09:59:48 -0400","date_gmt":"2015-07-22 13:59:48 -0400","categories":["Tech Notes"],"tags":["rails","nodejs","hapi"]}},"__N_SSG":true}
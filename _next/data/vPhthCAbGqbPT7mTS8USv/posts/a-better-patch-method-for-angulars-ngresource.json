{"pageProps":{"postData":{"id":"a-better-patch-method-for-angulars-ngresource","contentHtml":"<p>Angular's ngResource makes a pretty decent starting point for developing a front-end model layer, but tends to be a little simplistic as your backend API gets more sophisticated.</p>\n<p>One issue I ran into recently is that the <code>$patch</code> method sends the entire object in the request body. This is usually not what you want to do, because the PATCH method is <a href=\"https://tools.ietf.org/html/rfc5789\">designed for a partial resource modification</a>, typically using something like <a href=\"https://tools.ietf.org/html/rfc7386\">JSON Merge Patch</a> or <a href=\"https://tools.ietf.org/html/rfc6902\">JSON Patch</a> as the request body.</p>\n<p>Here's how to add a <code>$patchFields</code> method to your resource that creates a JSON Merge Patch for a set of fields, and then sends it to the backend.</p>\n<p>This is how you'd use it:</p>\n<div><pre><code><span>var</span> product <span>=</span> <span>new</span> <span>Product</span><span>(</span><span>{</span>\n   id<span>:</span> <span>231</span>\n   name<span>:</span> <span>'iPad'</span><span>,</span>\n   price<span>:</span> <span>429.99</span><span>,</span>\n   size<span>:</span> <span>{</span>\n      height<span>:</span> <span>9.4</span><span>,</span>\n      width<span>:</span> <span>6.2</span><span>,</span>\n      depth<span>:</span> <span>0.2</span>\n   <span>}</span>\n<span>}</span><span>)</span><span>;</span>\n\nproduct<span>.</span><span>price</span> <span>=</span> <span>400</span><span>;</span>\nproduct<span>.</span><span>size</span><span>.</span><span>height</span> <span>=</span> <span>10</span><span>;</span>\n\n<span>var</span> promise <span>=</span> product<span>.</span><span>$patchFields</span><span>(</span><span>[</span><span>'price'</span><span>,</span> <span>'size.height'</span><span>]</span><span>)</span><span>;</span>\n\n<span>/*</span>\n<span> * Sends a request like this:</span>\n<span> * PATCH http://api.example.com/products/231</span>\n<span> * {</span>\n<span> *    \"price\": 400,</span>\n<span> *    \"size\": {</span>\n<span> *       \"height\": 10</span>\n<span> *    }</span>\n<span> * }</span>\n<span> *</span>\n<span> */</span>\n</code></pre></div>\n<p>And here's the code:</p>\n<div><pre><code>angular<span>.</span><span>module</span><span>(</span><span>'myApp'</span><span>)</span><span>.</span><span>factory</span><span>(</span><span>'Product'</span><span>,</span> <span>function</span><span>(</span><span>$resource</span><span>)</span> <span>{</span>\n\n   <span>var</span> <span>Product</span> <span>=</span> <span>$resource</span><span>(</span>\n      <span>'http://api.example.com/products/:id'</span><span>,</span>\n      <span>{</span> id<span>:</span> <span>'id'</span> <span>}</span>\n   <span>)</span><span>;</span>\n\n   angular<span>.</span><span>extend</span><span>(</span><span>Product</span><span>.</span><span>prototype</span><span>,</span> <span>{</span>\n      <span>'$patchFields'</span><span>:</span> <span>function</span><span>(</span><span>fields<span>,</span> success<span>,</span> error</span><span>)</span> <span>{</span>\n         <span>var</span> self <span>=</span> <span>this</span><span>;</span>\n         patch <span>=</span> self<span>.</span><span>generatePatch</span><span>(</span>fields<span>)</span><span>;</span>\n         <span>var</span> result <span>=</span> <span>Product</span><span>.</span><span>patch</span><span>.</span><span>call</span><span>(</span>\n            <span>this</span><span>,</span>\n            <span>{</span> id<span>:</span> self<span>.</span><span>id</span> <span>}</span><span>,</span>\n            patch<span>,</span>\n            success<span>,</span>\n            error\n         <span>)</span><span>;</span>\n         <span>return</span> result<span>.</span><span>$promise</span> <span>||</span> result<span>;</span>\n      <span>}</span><span>,</span>\n      <span>generatePatch</span><span>:</span> <span>function</span><span>(</span><span>fields</span><span>)</span> <span>{</span>\n         <span>var</span> self <span>=</span> <span>this</span><span>;</span>\n         <span>if</span><span>(</span><span>!</span>angular<span>.</span><span>isArray</span><span>(</span>fields<span>)</span><span>)</span> <span>{</span>\n            fields <span>=</span> <span>[</span> fields <span>]</span><span>;</span>\n         <span>}</span>\n\n         <span>return</span> fields<span>.</span><span>reduce</span><span>(</span><span>function</span><span>(</span><span>result<span>,</span> fields</span><span>)</span> <span>{</span>\n            <span>setFieldByPath</span><span>(</span>result<span>,</span> field<span>,</span> self<span>.</span><span>getFieldByPath</span><span>(</span>field<span>)</span><span>)</span><span>;</span>\n            <span>return</span> result<span>;</span>\n         <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span><span>;</span>\n      <span>}</span><span>,</span>\n      <span>getFieldByPath</span><span>:</span> <span>function</span><span>(</span><span>path</span><span>)</span> <span>{</span>\n         <span>var</span> ret <span>=</span> angular<span>.</span><span>toJson</span><span>(</span>json<span>)</span><span>;</span>\n         <span>var</span> paths <span>=</span> path<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>;</span>\n         <span>for</span><span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&#x3C;</span> paths<span>.</span><span>length</span><span>;</span> <span>++</span>i<span>)</span> <span>{</span>\n            <span>if</span><span>(</span>angular<span>.</span><span>isUndefined</span><span>(</span>ret<span>[</span>paths<span>[</span>i<span>]</span><span>]</span><span>)</span><span>)</span> <span>{</span>\n               <span>return</span> <span>undefined</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n               ret <span>=</span> ret<span>[</span>paths<span>[</span>i<span>]</span><span>]</span><span>;</span>\n            <span>}</span>\n         <span>}</span>\n         <span>return</span> ret<span>;</span>\n      <span>}</span>\n   <span>}</span><span>)</span><span>;</span>\n\n   <span>function</span> <span>setFieldByPath</span><span>(</span><span>obj<span>,</span> path<span>,</span> value</span><span>)</span> <span>{</span>\n      <span>var</span> paths <span>=</span> path<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>;</span>\n      <span>var</span> setOn <span>=</span> obj<span>;</span>\n\n      <span>for</span><span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&#x3C;</span> paths<span>.</span><span>length</span> <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>\n         <span>var</span> path <span>=</span> paths<span>[</span>i<span>]</span><span>;</span>\n         <span>if</span><span>(</span><span>!</span>angular<span>.</span><span>isUndefined</span><span>(</span>setOn<span>[</span>path<span>]</span><span>)</span><span>)</span> <span>{</span>\n            <span>if</span><span>(</span>\n               angular<span>.</span><span>isObject</span><span>(</span>setOn<span>[</span>path<span>]</span><span>)</span> <span>&#x26;&#x26;</span>\n               <span>!</span>angular<span>.</span><span>isArray</span><span>(</span>setOn<span>[</span>path<span>]</span><span>)</span>\n            <span>)</span> <span>{</span>\n               setOn <span>=</span> setOn<span>[</span>path<span>]</span><span>;</span>\n            <span>}</span> <span>else</span> <span>{</span>\n               <span>throw</span> <span>new</span> <span>Error</span><span>(</span>\n                  <span>'Path '</span> <span>+</span>\n                  path <span>+</span>\n                  <span>' has an item that is not an object'</span>\n               <span>)</span><span>;</span>\n            <span>}</span>\n         <span>}</span> <span>else</span> <span>{</span>\n            setOn<span>[</span>path<span>]</span> <span>=</span> <span>{</span><span>}</span><span>;</span>\n            setOn <span>=</span> setOn<span>[</span>path<span>]</span><span>;</span>\n         <span>}</span>\n      <span>}</span>\n\n      <span>if</span><span>(</span><span>!</span>angular<span>.</span><span>isFunction</span><span>(</span>setOn<span>[</span>paths<span>[</span>paths<span>.</span><span>length</span> <span>-</span> <span>1</span><span>]</span><span>]</span><span>)</span><span>)</span> <span>{</span>\n         setOn<span>[</span>paths<span>[</span>paths<span>.</span><span>length</span> <span>-</span> <span>1</span><span>]</span><span>]</span> <span>=</span> value<span>;</span>\n      <span>}</span> <span>else</span> <span>{</span>\n         <span>throw</span> <span>new</span> <span>Error</span><span>(</span>\n            <span>'Cannot set value at '</span> <span>+</span>\n            path <span>+</span>\n            <span>' since it would overwrite a function'</span>\n         <span>)</span><span>;</span>\n      <span>}</span>\n   <span>}</span>\n\n   <span>return</span> <span>Product</span><span>;</span>\n\n<span>}</span><span>)</span><span>;</span>\n</code></pre></div>\n","layout":"post","title":"A Better $patch Method for Angular's ngResource","redirect_from":["/blog/a-better-patch-method-for-angulars-ngresource-373/","/blog/a-better-patch-method-for-angulars-ngresource-373/"]}},"__N_SSG":true}
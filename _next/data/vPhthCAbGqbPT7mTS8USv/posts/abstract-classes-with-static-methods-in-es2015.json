{"pageProps":{"postData":{"id":"abstract-classes-with-static-methods-in-es2015","contentHtml":"<p>ES2105 classes have much better support for static method patterns than traditional ways of doing it in ES5.</p>\n<p>In ES2015, there are actually two prototype chains in classes: one for instance methods and one for static methods. This means you can use <code>super</code> and <code>this</code> in a static method, and it works as expected.</p>\n<p>This makes using an abstract class pattern much easier. Here's an example:</p>\n<div><pre><code><span>'use strict'</span><span>;</span>\n\n<span>class</span> <span>AbstractShape</span> <span>{</span>\n  <span>static</span> <span>get</span> <span>SHAPE_NAME</span><span>(</span><span>)</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span>\n      <span>'must specify a SHAPE_NAME in your subclass of '</span> <span>+</span>\n      <span>'AbstractShape'</span>\n    <span>)</span><span>;</span>\n  <span>}</span>\n\n  <span>static</span> <span>get</span> <span>englishName</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span><span>SHAPE_NAME</span><span>[</span><span>'en-US'</span><span>]</span><span>;</span>\n  <span>}</span>\n\n  <span>static</span> <span>get</span> <span>spanishName</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span><span>SHAPE_NAME</span><span>[</span><span>'en-MX'</span><span>]</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>class</span> <span>Square</span> <span>extends</span> <span>AbstractShape</span> <span>{</span>\n  <span>static</span> <span>get</span> <span>SHAPE_NAME</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n      <span>'en-US'</span><span>:</span> <span>'square'</span><span>,</span>\n      <span>'es-MX'</span><span>:</span> <span>'cuadrado'</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>console</span><span>.</span><span>log</span><span>(</span><span>Square</span><span>.</span><span>englishName</span><span>)</span><span>;</span> <span>// -> 'square'</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>Square</span><span>.</span><span>spanishName</span><span>)</span><span>;</span> <span>// -> 'cuadrado'</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>AbstractShape</span><span>.</span><span>englishName</span><span>)</span><span>;</span> <span>// Throws an Error</span>\n</code></pre></div>\n<p>A few things that are interesting with ES2015 static methods:</p>\n<ul>\n<li>You can't have static properties, but you can make static getters to get the same effect (with some syntactic noise).</li>\n<li>In a static method, <code>this</code> refers to the class itself. Effectively, you can just access other static methods with <code>this</code>.</li>\n<li>You cannot refer to the class itself in the class body. This is not legal:</li>\n</ul>\n<div><pre><code><span>static</span> <span>get</span> <span>englishName</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>AbstractShape</span><span>.</span><span>SHAPE_NAME</span><span>[</span><span>'en-US'</span><span>]</span><span>;</span> <span>}</span>\n</code></pre></div>\n<p>I'm guessing is the reason for this is that classes are not hoisted in ES2015.</p>\n<p>More class posts coming soon!</p>\n","layout":"post","status":"publish","published":true,"title":"Abstract Classes with Static Methods in ES2015","author":{"display_name":"afiedler","login":"afiedler","email":"andy@andyfiedler.com","url":""},"author_login":"afiedler","author_email":"andy@andyfiedler.com","wordpress_id":357,"wordpress_url":"http://andyfiedler.com/?p=357","date":"2016-01-19 14:42:17 -0500","date_gmt":"2016-01-19 19:42:17 -0500","categories":["Tech Notes"],"tags":["nodejs","es2015"]}},"__N_SSG":true}